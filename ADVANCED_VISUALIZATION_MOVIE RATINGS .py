#!/usr/bin/env python
# coding: utf-8

# # Movie Rating Analytics (Advance Visualisation)

# In[1]:


import pandas as pd
import os


# In[2]:


data = pd.read_csv(r'C:\Users\hp\OneDrive\Documents\Desktop\Movie-Rating.csv')


# In[3]:


data


# In[4]:


len(data)


# In[5]:


data.head()


# In[6]:


data.tail()


# In[7]:


data.columns


# In[8]:


data.columns=['Film', 'Genre', 'criticrating', 'AudienceRating', 'Budgetmillions', 'Year']


# In[9]:


data


# In[10]:


data.head() # Removed spaces & % removed noise characters


# In[11]:


data.info()


# In[12]:


data.describe()
#if you look at the year the data type is int but when you look at the mean value it showing 2009 which is meaningless
# we have to change to categroy type 
# also from object datatype we will convert to category datatypes
# 


# In[13]:


data["Film"]
#movies['Audience Ratings %']


# In[14]:


data.Film


# In[15]:


data.Film = data.Film.astype("category")


# In[16]:


data.Film


# In[17]:


data.head()


# In[18]:


data.info()


# In[19]:


data.Genre = data.Genre.astype("category")
data.Year=data.Year.astype("category")


# In[20]:


data.Year # is it real no. year you can take average,min,max but out come have no meaning 


# In[21]:


data.Genre.cat.categories


# In[22]:


data.describe()
#now when you see the describt you will get only integer value mean, standard deviation which is meaning full


# In[23]:


# How to working with joint plots
from matplotlib import pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")


# In[24]:


movies = data.copy()


# In[26]:


movies


# * basically joint plot is a scatter plot & it find the relation b/w audiene & critics
# * also if you look up you can find the uniform distribution (critics)and normal distriution (audience)

# In[28]:


a = sns.jointplot( data = movies, x = 'AudienceRating', y ='criticrating',kind='hex')
# Audience rating is more dominant then critics rating
# Based on this we find out as most people are most liklihood to watch audience rating & less likely to wathc critics rating
# let me explain the excel - if you filter audience rating & critic rating. critic rating has very low values compare to audience rating 


# In[31]:


j = sns.jointplot( data = movies, x = 'criticrating', y = 'AudienceRating')


# In[33]:


# Histogram
#<< chat1
m1 = sns.distplot(movies.AudienceRating)
#y - axis generated by seaborn automatically that is the powefull of seaborn gallery


# In[34]:


sns.set_style("darkgrid")


# In[36]:


m2 = sns.displot(movies.AudienceRating, bins = 15)


# In[37]:


#sns.set_style("darkgrid")
n1 = plt.hist(movies.AudienceRating, bins=15)


# In[40]:


sns.set_style("white")# normal distribution & called as bell curve
n1 = plt.hist(movies.AudienceRating, bins=20)


# In[41]:


n1= plt.hist(movies.criticrating,bins=20)# uniform distribution


# In[42]:


# <<< chat - 2
# Creating stacked histograms & this is bit tough to understand


# In[45]:


movies.head(1)


# In[46]:


#h1 = plt.hist(movies.BudgetMillions)

plt.hist(movies.Budgetmillions)
plt.show()


# In[49]:


movies.Year.cat.categories


# In[50]:


plt.hist(movies[movies.Genre == "Drama"].Budgetmillions)
plt.show()


# In[51]:


movies.head()


# In[52]:


#movies.genre.unique()


# In[56]:


# blow plot are stacked histogram because overlaped
plt.hist(movies[movies.Genre == "Action"]. Budgetmillions, bins = 20)
plt.hist(movies[movies.Genre == "Thriller"]. Budgetmillions, bins = 20)
plt.hist(movies[movies.Genre == "Drama"]. Budgetmillions, bins = 20)
plt.legend()
plt.show()


# In[59]:


plt.hist([movies[movies.Genre == "Action"].Budgetmillions,\
          movies[movies.Genre == "Drama"].Budgetmillions,\
          movies[movies.Genre == "Thriller"].Budgetmillions,\
          movies[movies.Genre == "Comedy"].Budgetmillions],
          bins = 20, stacked = True)
plt.show()


# In[61]:


# # if you have 100 categories you cannot copy & paste all the things
for gen in movies.Genre.cat.categories:
    print(gen)


# In[63]:


vis1 = sns.lmplot(data=movies, x="criticrating", y="AudienceRating",\
                 fit_reg=False)


# In[64]:


vis1 = sns.lmplot(data=movies, x="criticrating", y="AudienceRating",\
                 fit_reg=False, hue = "Genre")


# In[71]:


vis1 = sns.lmplot(data=movies, x="criticrating", y="AudienceRating",fit_reg=False,hue = "Genre",aspect=1)


# In[72]:


# Kernal Density Estimate plot ( KDE PLOT) 
# how can i visulize audience rating & critics rating . using scatterplot


# In[91]:


k1 = sns.kdeplot(x= movies.criticrating,y=movies.AudienceRating)


# In[86]:


import seaborn as sns
import matplotlib.pyplot as plt

# Assuming 'movies' is the DataFrame containing the data

# Plot KDE for 'CriticRating'
sns.kdeplot(data=movies, x='criticrating', fill=True, label='criticrating')

# Plot KDE for 'AudienceRating'
sns.kdeplot(data=movies, x='AudienceRating', fill=True, label='AudienceRating')

# Display the legend
plt.legend()

# Show the plot
plt.show()


# In[87]:


pip install seaborn --upgrade


# In[92]:


k1 = sns.kdeplot(x=movies.criticrating,y=movies.AudienceRating,shade = True,shade_lowest=False,cmap="Reds")


# In[97]:


k2 = sns.kdeplot(x=movies.criticrating,y=movies.AudienceRating,shade = False,shade_lowest=False,cmap="Greens_r")


# In[99]:


movies.head(1)


# In[100]:


sns.set_style("dark")
k2 = sns.kdeplot(x=movies.Budgetmillions,y=movies.AudienceRating,shade = False,shade_lowest=False,cmap="Greens_r")


# In[101]:


sns.set_style("dark")
k2 = sns.kdeplot(x=movies.Budgetmillions,y=movies.AudienceRating)


# In[102]:


k2 = sns.kdeplot(x=movies.Budgetmillions,y=movies.criticrating)


# In[110]:


#subplots
f, ax = plt.subplots(1,2, figsize = (12,6))
#f, ax = plt.subplot(3,3, figsize = (12,6))
#


# In[111]:


f, axes = plt.subplots(1,2, figsize = (12,6))

k1 = sns.kdeplot(x=movies.Budgetmillions,y=movies.AudienceRating,ax=axes[0])
k2 = sns.kdeplot(x=movies.Budgetmillions,y=movies.criticrating,ax=axes[1])


# In[112]:


axes


# In[114]:


#box plot - 

w = sns.boxplot(data=movies, x="Genre", y="criticrating")


# In[115]:


#violin plot

z = sns.violinplot(data=movies, x="Genre", y = "criticrating")


# In[116]:


w1 = sns.boxplot(data=movies[movies.Genre == "Drama"], x="Year", y = "criticrating")


# In[117]:


z = sns.violinplot(data=movies[movies.Genre == "Drama"], x="Year", y= "criticrating")


# In[118]:


# creating a facet grid


# In[120]:


g =sns.FacetGrid (movies,row = "Genre", col = "Year", hue = "Genre") # kind of subject


# In[121]:


plt.scatter(movies.criticrating,movies.AudienceRating)


# In[122]:


g = sns.FacetGrid (movies, row = "Genre", col ="Year", hue = "Genre")
g = g.map(plt.scatter, "criticrating", "AudienceRating") #scatterplots are mapped in facetgrid


# In[123]:


movies.head(1)


# In[124]:


# you can populated any type of chat

g =sns.FacetGrid (movies, row = "Genre", col = "Year", hue = "Genre")
g = g.map(plt.hist, "Budgetmillions") #  #scatterplots are mapped in facetgrid


# In[135]:


g =sns.FacetGrid (movies, row = "Genre", col = "Year", hue = "Genre")
kws = dict(s=50, linewidth=0.5,edgecolor="black")
g = g.map(plt.scatter, 'criticrating', 'AudienceRating',**kws)#scatterplots are mapped in facetgrid


# In[134]:


g =sns.FacetGrid (movies, row = 'Genre', col = 'Year', hue = 'Genre')
kws = dict(s=50, linewidth=0.5,edgecolor='black')
g = g.map(plt.scatter, 'criticrating', 'AudienceRating',**kws )


# In[156]:


#python is not vectorize programming language
# Building dashboards (dashboard - combination of chats)

sns.set_style("darkgrid")
f,axes = plt.subplots (2,2, figsize = (5,5))

k1 = sns.kdeplot(x=movies.Budgetmillions,y=movies.AudienceRating,ax=axes[0,0])
k2 = sns.kdeplot(x=movies.Budgetmillions,y=movies.criticrating,ax=axes[0,1])

k1.set(xlim=(-20,160))
k2.set(xlim=(-20,160))

z = sns.violinplot(data=movies[movies.Genre=="Drama"], x="Year", y = "criticrating", ax=axes[1,0])
#k4 = sns.kdeplot(movies.criticrating, movies.AudienceRating,cmap="Reds",ax = axes[1,1])
k4 = sns.kdeplot(x=movies.criticrating,y=movies.AudienceRating,shade = True,shade_lowest=False,cmap="Reds")
plt.show()


# In[158]:


sns.set_style('dark',{'axes.facecolor':'black'})
f, axes = plt.subplots (2,2, figsize = (5,5))

#plot [0,0]
k1 = sns.kdeplot(x=movies.Budgetmillions,y=movies.AudienceRating, ax = axes[0,0])
k1b = sns.kdeplot(x=movies.Budgetmillions,y=movies.AudienceRating,cmap = 'cool',ax = axes[0,0])

#plot [0,1]
k2 = sns.kdeplot(x=movies.Budgetmillions,y=movies.criticrating,ax = axes[0,1])
k2b = sns.kdeplot(x=movies.Budgetmillions,y=movies.criticrating,cmap = 'cool', ax = axes[0,1])

#plot[1,0]
z = sns.violinplot(data=movies[movies.Genre=='Drama'], \
                   x='Year', y = 'criticrating', ax=axes[1,0])

#plot[1,1]
k4 = sns.kdeplot(x=movies.criticrating,y=movies.AudienceRating,ax=axes[1,1])

k4b = sns.kdeplot(x=movies.criticrating,y=movies.AudienceRating,cmap='gist_gray_r',ax = axes[1,1])


k1.set(xlim=(-20,160))
k2.set(xlim=(-20,160))

plt.show()


# In[ ]:




